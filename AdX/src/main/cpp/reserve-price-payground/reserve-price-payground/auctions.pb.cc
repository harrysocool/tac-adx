// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auctions.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "auctions.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* AdxQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdxQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataBundle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataBundle_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MarketSegment_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Device_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AdType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_auctions_2eproto() {
  protobuf_AddDesc_auctions_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "auctions.proto");
  GOOGLE_CHECK(file != NULL);
  AdxQuery_descriptor_ = file->message_type(0);
  static const int AdxQuery_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdxQuery, publisher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdxQuery, marketsegments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdxQuery, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdxQuery, adtype_),
  };
  AdxQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdxQuery_descriptor_,
      AdxQuery::default_instance_,
      AdxQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdxQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdxQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdxQuery));
  AuctionReport_descriptor_ = file->message_type(1);
  static const int AuctionReport_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionReport, firstbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionReport, secondsbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionReport, reservedprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionReport, adxquery_),
  };
  AuctionReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionReport_descriptor_,
      AuctionReport::default_instance_,
      AuctionReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionReport));
  DataBundle_descriptor_ = file->message_type(2);
  static const int DataBundle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataBundle, reports_),
  };
  DataBundle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataBundle_descriptor_,
      DataBundle::default_instance_,
      DataBundle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataBundle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataBundle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataBundle));
  MarketSegment_descriptor_ = file->enum_type(0);
  Device_descriptor_ = file->enum_type(1);
  AdType_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_auctions_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdxQuery_descriptor_, &AdxQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionReport_descriptor_, &AuctionReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataBundle_descriptor_, &DataBundle::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_auctions_2eproto() {
  delete AdxQuery::default_instance_;
  delete AdxQuery_reflection_;
  delete AuctionReport::default_instance_;
  delete AuctionReport_reflection_;
  delete DataBundle::default_instance_;
  delete DataBundle_reflection_;
}

void protobuf_AddDesc_auctions_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016auctions.proto\"w\n\010AdxQuery\022\021\n\tpublishe"
    "r\030\001 \002(\t\022&\n\016marketSegments\030\002 \003(\0162\016.Market"
    "Segment\022\027\n\006device\030\003 \002(\0162\007.Device\022\027\n\006adty"
    "pe\030\004 \002(\0162\007.AdType\"i\n\rAuctionReport\022\020\n\010fi"
    "rstBid\030\001 \002(\001\022\022\n\nsecondsBid\030\002 \002(\001\022\025\n\rrese"
    "rvedPrice\030\003 \002(\001\022\033\n\010adxQuery\030\004 \002(\0132\t.AdxQ"
    "uery\"-\n\nDataBundle\022\037\n\007reports\030\001 \003(\0132\016.Au"
    "ctionReport*Z\n\rMarketSegment\022\010\n\004MALE\020\000\022\n"
    "\n\006FEMALE\020\001\022\t\n\005YOUNG\020\002\022\007\n\003OLD\020\003\022\016\n\nLOW_IN"
    "COME\020\004\022\017\n\013HIGH_INCOME\020\005*\034\n\006Device\022\n\n\006MOB"
    "ILE\020\000\022\006\n\002PC\020\001*\035\n\006AdType\022\010\n\004TEXT\020\000\022\t\n\005VID"
    "EO\020\001", 444);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "auctions.proto", &protobuf_RegisterTypes);
  AdxQuery::default_instance_ = new AdxQuery();
  AuctionReport::default_instance_ = new AuctionReport();
  DataBundle::default_instance_ = new DataBundle();
  AdxQuery::default_instance_->InitAsDefaultInstance();
  AuctionReport::default_instance_->InitAsDefaultInstance();
  DataBundle::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_auctions_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_auctions_2eproto {
  StaticDescriptorInitializer_auctions_2eproto() {
    protobuf_AddDesc_auctions_2eproto();
  }
} static_descriptor_initializer_auctions_2eproto_;
const ::google::protobuf::EnumDescriptor* MarketSegment_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketSegment_descriptor_;
}
bool MarketSegment_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Device_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Device_descriptor_;
}
bool Device_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdType_descriptor_;
}
bool AdType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AdxQuery::kPublisherFieldNumber;
const int AdxQuery::kMarketSegmentsFieldNumber;
const int AdxQuery::kDeviceFieldNumber;
const int AdxQuery::kAdtypeFieldNumber;
#endif  // !_MSC_VER

AdxQuery::AdxQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AdxQuery::InitAsDefaultInstance() {
}

AdxQuery::AdxQuery(const AdxQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AdxQuery::SharedCtor() {
  _cached_size_ = 0;
  publisher_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_ = 0;
  adtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdxQuery::~AdxQuery() {
  SharedDtor();
}

void AdxQuery::SharedDtor() {
  if (publisher_ != &::google::protobuf::internal::kEmptyString) {
    delete publisher_;
  }
  if (this != default_instance_) {
  }
}

void AdxQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdxQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdxQuery_descriptor_;
}

const AdxQuery& AdxQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auctions_2eproto();
  return *default_instance_;
}

AdxQuery* AdxQuery::default_instance_ = NULL;

AdxQuery* AdxQuery::New() const {
  return new AdxQuery;
}

void AdxQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_publisher()) {
      if (publisher_ != &::google::protobuf::internal::kEmptyString) {
        publisher_->clear();
      }
    }
    device_ = 0;
    adtype_ = 0;
  }
  marketsegments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdxQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string publisher = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publisher()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->publisher().data(), this->publisher().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_marketSegments;
        break;
      }

      // repeated .MarketSegment marketSegments = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marketSegments:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MarketSegment_IsValid(value)) {
            add_marketsegments(static_cast< ::MarketSegment >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::MarketSegment_IsValid,
                 this->mutable_marketsegments())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_marketSegments;
        if (input->ExpectTag(24)) goto parse_device;
        break;
      }

      // required .Device device = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_device:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Device_IsValid(value)) {
            set_device(static_cast< ::Device >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_adtype;
        break;
      }

      // required .AdType adtype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AdType_IsValid(value)) {
            set_adtype(static_cast< ::AdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AdxQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string publisher = 1;
  if (has_publisher()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->publisher().data(), this->publisher().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->publisher(), output);
  }

  // repeated .MarketSegment marketSegments = 2;
  for (int i = 0; i < this->marketsegments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->marketsegments(i), output);
  }

  // required .Device device = 3;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->device(), output);
  }

  // required .AdType adtype = 4;
  if (has_adtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->adtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AdxQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string publisher = 1;
  if (has_publisher()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->publisher().data(), this->publisher().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->publisher(), target);
  }

  // repeated .MarketSegment marketSegments = 2;
  for (int i = 0; i < this->marketsegments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->marketsegments(i), target);
  }

  // required .Device device = 3;
  if (has_device()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->device(), target);
  }

  // required .AdType adtype = 4;
  if (has_adtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->adtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AdxQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string publisher = 1;
    if (has_publisher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->publisher());
    }

    // required .Device device = 3;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->device());
    }

    // required .AdType adtype = 4;
    if (has_adtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->adtype());
    }

  }
  // repeated .MarketSegment marketSegments = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->marketsegments_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->marketsegments(i));
    }
    total_size += 1 * this->marketsegments_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdxQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdxQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdxQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdxQuery::MergeFrom(const AdxQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  marketsegments_.MergeFrom(from.marketsegments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_publisher()) {
      set_publisher(from.publisher());
    }
    if (from.has_device()) {
      set_device(from.device());
    }
    if (from.has_adtype()) {
      set_adtype(from.adtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdxQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdxQuery::CopyFrom(const AdxQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdxQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  return true;
}

void AdxQuery::Swap(AdxQuery* other) {
  if (other != this) {
    std::swap(publisher_, other->publisher_);
    marketsegments_.Swap(&other->marketsegments_);
    std::swap(device_, other->device_);
    std::swap(adtype_, other->adtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdxQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdxQuery_descriptor_;
  metadata.reflection = AdxQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuctionReport::kFirstBidFieldNumber;
const int AuctionReport::kSecondsBidFieldNumber;
const int AuctionReport::kReservedPriceFieldNumber;
const int AuctionReport::kAdxQueryFieldNumber;
#endif  // !_MSC_VER

AuctionReport::AuctionReport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuctionReport::InitAsDefaultInstance() {
  adxquery_ = const_cast< ::AdxQuery*>(&::AdxQuery::default_instance());
}

AuctionReport::AuctionReport(const AuctionReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuctionReport::SharedCtor() {
  _cached_size_ = 0;
  firstbid_ = 0;
  secondsbid_ = 0;
  reservedprice_ = 0;
  adxquery_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionReport::~AuctionReport() {
  SharedDtor();
}

void AuctionReport::SharedDtor() {
  if (this != default_instance_) {
    delete adxquery_;
  }
}

void AuctionReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionReport_descriptor_;
}

const AuctionReport& AuctionReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auctions_2eproto();
  return *default_instance_;
}

AuctionReport* AuctionReport::default_instance_ = NULL;

AuctionReport* AuctionReport::New() const {
  return new AuctionReport;
}

void AuctionReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    firstbid_ = 0;
    secondsbid_ = 0;
    reservedprice_ = 0;
    if (has_adxquery()) {
      if (adxquery_ != NULL) adxquery_->::AdxQuery::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double firstBid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &firstbid_)));
          set_has_firstbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_secondsBid;
        break;
      }

      // required double secondsBid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_secondsBid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &secondsbid_)));
          set_has_secondsbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_reservedPrice;
        break;
      }

      // required double reservedPrice = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_reservedPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reservedprice_)));
          set_has_reservedprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_adxQuery;
        break;
      }

      // required .AdxQuery adxQuery = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_adxQuery:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adxquery()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuctionReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double firstBid = 1;
  if (has_firstbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->firstbid(), output);
  }

  // required double secondsBid = 2;
  if (has_secondsbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->secondsbid(), output);
  }

  // required double reservedPrice = 3;
  if (has_reservedprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->reservedprice(), output);
  }

  // required .AdxQuery adxQuery = 4;
  if (has_adxquery()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->adxquery(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuctionReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double firstBid = 1;
  if (has_firstbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->firstbid(), target);
  }

  // required double secondsBid = 2;
  if (has_secondsbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->secondsbid(), target);
  }

  // required double reservedPrice = 3;
  if (has_reservedprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->reservedprice(), target);
  }

  // required .AdxQuery adxQuery = 4;
  if (has_adxquery()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->adxquery(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuctionReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double firstBid = 1;
    if (has_firstbid()) {
      total_size += 1 + 8;
    }

    // required double secondsBid = 2;
    if (has_secondsbid()) {
      total_size += 1 + 8;
    }

    // required double reservedPrice = 3;
    if (has_reservedprice()) {
      total_size += 1 + 8;
    }

    // required .AdxQuery adxQuery = 4;
    if (has_adxquery()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adxquery());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionReport::MergeFrom(const AuctionReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_firstbid()) {
      set_firstbid(from.firstbid());
    }
    if (from.has_secondsbid()) {
      set_secondsbid(from.secondsbid());
    }
    if (from.has_reservedprice()) {
      set_reservedprice(from.reservedprice());
    }
    if (from.has_adxquery()) {
      mutable_adxquery()->::AdxQuery::MergeFrom(from.adxquery());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionReport::CopyFrom(const AuctionReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_adxquery()) {
    if (!this->adxquery().IsInitialized()) return false;
  }
  return true;
}

void AuctionReport::Swap(AuctionReport* other) {
  if (other != this) {
    std::swap(firstbid_, other->firstbid_);
    std::swap(secondsbid_, other->secondsbid_);
    std::swap(reservedprice_, other->reservedprice_);
    std::swap(adxquery_, other->adxquery_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionReport_descriptor_;
  metadata.reflection = AuctionReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataBundle::kReportsFieldNumber;
#endif  // !_MSC_VER

DataBundle::DataBundle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataBundle::InitAsDefaultInstance() {
}

DataBundle::DataBundle(const DataBundle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataBundle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataBundle::~DataBundle() {
  SharedDtor();
}

void DataBundle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataBundle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataBundle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataBundle_descriptor_;
}

const DataBundle& DataBundle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auctions_2eproto();
  return *default_instance_;
}

DataBundle* DataBundle::default_instance_ = NULL;

DataBundle* DataBundle::New() const {
  return new DataBundle;
}

void DataBundle::Clear() {
  reports_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataBundle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AuctionReport reports = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reports:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reports()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_reports;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataBundle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .AuctionReport reports = 1;
  for (int i = 0; i < this->reports_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reports(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataBundle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .AuctionReport reports = 1;
  for (int i = 0; i < this->reports_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reports(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataBundle::ByteSize() const {
  int total_size = 0;

  // repeated .AuctionReport reports = 1;
  total_size += 1 * this->reports_size();
  for (int i = 0; i < this->reports_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reports(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataBundle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataBundle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataBundle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataBundle::MergeFrom(const DataBundle& from) {
  GOOGLE_CHECK_NE(&from, this);
  reports_.MergeFrom(from.reports_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataBundle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataBundle::CopyFrom(const DataBundle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataBundle::IsInitialized() const {

  for (int i = 0; i < reports_size(); i++) {
    if (!this->reports(i).IsInitialized()) return false;
  }
  return true;
}

void DataBundle::Swap(DataBundle* other) {
  if (other != this) {
    reports_.Swap(&other->reports_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataBundle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataBundle_descriptor_;
  metadata.reflection = DataBundle_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
